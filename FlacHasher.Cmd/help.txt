This program hashes actual (uncompressed) audio content of a file without any of the metadata. It produces the same result for the same audio data regardless of metadata tags, compression level and even format/codec (provided it's lossless). This allows fingerprinting of actual audio data without having to "freeze" metadata tags after and comparison of two files on pure audio data level.
It also does verification: a comparison of hashes of specified files against what's recorded in a text file (here referred to as "hashfile").

===========================================================
  IMPORTANT!
It uses external 3rd party audio decoders that have to be obtained and installed by the user. It can be configured to decode any type of file as long as the decoder has an executable command-line interface and can accept input either via std-input or command-line parameters.
By default, it tries to use FLAC decoder. To use any other decoder, it has to be configured manually -- see parameter/configuration reference below.

===========================================================
The following commands are available:
  - hash (operation name is optional, it executes by default)
  - verify
  - help (for parameter/configuration reference)

Syntax:
  flachasher [command] [--param=value]

for example:
  flachasher hash --input=c:\muzak\slts.flac --algorithm=md5

Where value is "true"/"false", the value can be completely omitted to provide "true", eg:
  flachash --fail-fast

===========================================================
  PARAMETER / CONFIGURATION INFO

- Command-line parameter values with spaces: put the whole value in quotes, eg:
    flachasher --input="c:\flac files\01 track.flac"

- Many aspects can be configured via the settings file (where settings file key is provided), in which case they don't have to be specified via the command-line parameters.
  Settings file: settings.cfg

- Parameters that take arrays of values (eg input or decoder parameters) have to be separated by a semi-color (;), eg:
    --input=track1.flac;track2.flac

  Alternatively, multi-value command-line parameters can be repeated to provide multiple values, eg:
    --input=track1.flac --input=track2.flac

  The latter doesn't apply to the settings file.

===========================================================
  HASHING

Resulting hashes get written to std-out stream (whereas the rest of the info - to std-error), which means that they can be written to a file using standard output redirection commands.
Multiple files can be hashed at a time.

The most important inputs here are:
  1) input audio files
  2) audio decoder -- configuration explained in a dedicated section
  3) hashing algorithm
  4) output format

{HASHING_PARAMS}

===========================================================
  VERIFICATION

A "hashfile" can either contain just the hashes (with no file names) or filenames with hashes.
If a hashfile contains file names, then HashfileEntrySeparator must be configured.

The most important inputs here are:
  1) hashfile
  2) actual audio files
  3) audio decoder -- configuration explained in a dedicated section
  4) hashing algorithm
  5) hashfile format

Input -- Hashfile has to be either/or:
a) a full path to the file - then target files get taken from the same directory as the hashfile, or from Input Directory specified separately;
b) relative path (just the file name) - then Input Directory has to be specified (otherwise, hashfile and target files get looked up in "current" directory).

If Hashfile is not explicitly specified, it gets looked up in the Input Directory using HashfileExtensions

Input - Target file names get taken from the hashfile and are looked up in:
a) Hashfile directory, if hashfile paramter is a full path
b) Input Directory, if specified -- based on TargetFileExtension
c) Input Files, if specified

{VERIFICATION_PARAMS}

===========================================================
  AUDIO DECODER SET UP

The program needs to know the path to the Audio Decoder executable file. It can be a full path or just a file name, in which case it gets looked up in paths configured in PATH environment variable.
If not specified, the value is assumed to be "flac.exe", in which case it uses default decoder parameters (unless explicitly defined).

{DECODER_PARAMS}