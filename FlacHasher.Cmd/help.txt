The following commands are available:
  - hash (operation name is optional, it executes by default)
  - verify
  - help (for parameter/configuration reference)

Syntax:
  flachasher [command] [--param=value]

for example:
  flachasher hash --input=c:\muzak\slts.flac --algorithm=md5

Where value is "true"/"false", the value can be completely omitted to provide "true", eg:
  flachash --fail-fast

===========================================================
  PARAMETER / CONFIGURATION INFO

- Many aspects can also be configured via the settings file, which means they can be configured once. In such case, a value can be provided either way. A relevant settings file key will be listed right next to the command-line parameter, where available.

  Settings file: settings.cfg

- Command-line parameter values with spaces: put the whole value in quotes, eg:
    flachasher --input="c:\flac files\01 track.flac"

- Parameters that take arrays of values (eg input or decoder parameters) have to be separated by a semi-color (;), eg:
    --input=track1.flac;track2.flac

  Alternatively, multi-value command-line parameters can be repeated to provide multiple values, eg:
    --input=track1.flac --input=track2.flac

  The latter doesn't apply to the settings file.

===========================================================
  HASHING

Resulting hashes get written to std-out stream (whereas the rest of the info - to std-error), which means that they can be written to a file using standard output redirection commands.
Multiple files can be hashed at a time.

The most important inputs here are:
  1) input audio files
  2) audio decoder -- configuration explained in a dedicated section
  3) hashing algorithm
  4) output format

{HASHING_PARAMS}

===========================================================
  VERIFICATION

{HASHFILE_DESCRIPTION}

The most important inputs here are:
  1) hashfile
  2) actual audio files
  3) audio decoder -- configuration explained in a dedicated section
  4) hashing algorithm
  5) hashfile format

Input -- Hashfile has to be either/or:
a) a full path to the file - then target files get taken from the same directory as the hashfile, or from Input Directory specified separately;
b) relative path (just the file name) - then Input Directory has to be specified (otherwise, hashfile and target files get looked up in "current" directory).

If a Hashfile is not explicitly specified, it gets looked up in the Input Directory using HashfileExtensions.

Input - Target file names get taken from the hashfile and are looked up in:
a) Hashfile directory, if hashfile paramter is a full path
b) Input Directory, if specified -- based on TargetFileExtension
c) Input Files, if specified


{VERIFICATION_PARAMS}